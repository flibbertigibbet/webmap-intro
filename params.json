{
  "name": "Webmap-intro",
  "tagline": "Materials for introductory mapping presentation",
  "body": "# Welcome to Web Maps!\r\n\r\nWe will explore interactive map-making for the web.\r\n\r\nNot a coder? Not a problem! We will start out by creating a map on [CartoDB](https://cartodb.com/), which you can do with a free account and without knowing how to code.\r\n\r\nWant to see some code? Sure thing! We will get to that, too.\r\n\r\n## What's covered:\r\n\r\n  - Import a dataset of Philadelphia parks to CartoDB\r\n  - Try out some spatial queries for data analysis:\r\n    - How many parks are within half of a mile of City Hall?\r\n    - What ten parks are closest to City Hall, and how far away are they?\r\n  - Make a web page that loads your CartoDB visualization\r\n  - Make a web page with a [Leaflet](http://leafletjs.com/) map\r\n  - Load a [GeoJSON](http://geojson.org/) file into a Leaflet map\r\n\r\n## What's needed:\r\n\r\nTo follow along with the CartoDB portion, you will want to create a free account. Here is [an example](https://banderkat.cartodb.com/viz/d0d757ec-0ff8-11e6-9c80-0e8c56e2ffdb/public_map) of what a simple map of the parks dataset looks like once it has been imported and shared as a public visualization.\r\n\r\n## Fun with CartoDB\r\n\r\nWe will play with a dataset of Philadelpia park boundaries, which you can download from PASDA [here](ftp://www.pasda.psu.edu/pub/pasda/philacity/data/Philadelphia_PPR_Park_Boundaries201302.zip) (426 kB). Import it into your CartoDB account and create a map from it.\r\n\r\nYou may want to rename your dataset after it finishes importing to something easier to type. I named mine `philly_parks`.\r\n\r\n## Querying PostGIS\r\n\r\nCartoDB uses PostGIS geospatial extensions to a PostgreSQL database created for your account, and provides an interface for viewing what's in the database. We're going to try out some PostGIS queries.\r\n\r\nOpen the sliding pane to the right of the map view. The SQL tab is towards the top. Here we can write custom queries and try them out.\r\n\r\nWe want to search for parks around City Hall, so first let's draw a circle around City Hall with a half-mile radius. Plug this into the SQL pane and click 'Apply':\r\n\r\n```sql\r\nSELECT ST_Buffer(\r\n ST_Transform(\r\n   ST_SetSRID(\r\n     ST_Point(-75.163431,39.952707),\r\n     4326),\r\n   3857),\r\n  0.5 * 1609) as the_geom_webmercator\r\n```\r\n\r\nSo what does that do? The query creates a point at City Hall with `ST_Point`, then `ST_Buffer` creates a buffer around it, in meters; that's the radius of the circle drawn. `ST_Transform` and `ST_SetSRID` deal with map projections. For more information on buffering and distances, CartoDB has a tutorial [here](http://academy.cartodb.com/courses/sql-postgis/postgis-in-cartodb/).\r\n\r\nA yellow banner pops up at the top of the map; click the link in it to 'create dataset from query'. Now we can have our circle around City Hall saved to easily put on other maps. I named my new dataset `city_hall_half_mile`.\r\n\r\nCreate a new map with both datasets. (You can also add a layer to an existing map instead). Change the polygon fill color for one of the layers, so they are easier to tell apart. Now, let's filter the parks to only show the ones within two miles of City Hall by putting this query into the SQL pane:\r\n\r\n```sql\r\nSELECT philly_parks.* FROM philly_parks,\r\ncity_hall_half_mile\r\nWHERE ST_DWithin(\r\n  city_hall_half_mile.the_geom_webmercator,\r\n  philly_parks.the_geom_webmercator,\r\n  1.5 * 1609)\r\n```\r\n\r\n`ST_DWithin` filters the second geometry based on its distance in meters from the first geometry.\r\n\r\nSo which parks lie at least in part within the half-mile circle?\r\n\r\n```sql\r\nSELECT philly_parks.* FROM philly_parks,\r\ncity_hall_half_mile\r\nWHERE ST_Intersects(\r\n  city_hall_half_mile.the_geom_webmercator,\r\n  philly_parks.the_geom_webmercator)\r\n```\r\n\r\nAnd which parks are fully inside the circle?\r\n\r\n```sql\r\nSELECT philly_parks.* FROM philly_parks,\r\ncity_hall_half_mile\r\nWHERE ST_Contains(\r\n  city_hall_half_mile.the_geom_webmercator,\r\n  philly_parks.the_geom_webmercator)\r\n```\r\n\r\nOkay. What are the ten parks closest to City Hall, and how far away are each?\r\n\r\n```sql\r\nSELECT ST_X(ST_Centroid(the_geom)) as longitude,\r\n  ST_Y(ST_Centroid(the_geom)) as latitude,\r\n  park, cartodb_id,\r\n  the_geom_webmercator,\r\nST_Distance(the_geom::geography,\r\n  ST_PointFromText('POINT(-75.163431 39.952707)',\r\n  4326)::geography) AS distance\r\nFROM philly_parks\r\nORDER BY the_geom <-> ST_PointFromText(\r\n'POINT(-75.163431 39.952707)', 4326)\r\nLIMIT 10\r\n```\r\n\r\nYou can see the distances listed by going to the 'Data View', using the button at top. For more information on distance sorting, CartoDB has a tutorial [here](http://docs.cartodb.com/tips-and-tricks/advanced-analysis/#sort-records-by-distance-to-a-point).\r\n\r\n## Making a web page that loads a CartoDB visualization\r\n\r\nIf you click the 'Publish' button in the upper right corner of a map, you get a shareable link, a snippet of code for embedding the map, and a third option that we're going to explore now, which is to load your map using CartoDB.js.\r\n\r\nCopy the link in the CartoDB.js section to your map's `viz.json`. We will use that later. If you follow the 'Read more' link above it, it will take you to the CartoDB.js tutorials. Let's start with their source for the 'Getting Started' tutorial, and modify it to load our visualization. Copy the example code from [here](https://raw.githubusercontent.com/CartoDB/cartodb.js/develop/examples/easy.html) into a text editor.\r\n\r\nChange the link to the `viz.json` to reference the one for your map. Set the center to be on City Hall, and change the zoom level to zoom in on Philly:\r\n\r\n```js\r\ncenter_lat: 39.952707,\r\ncenter_lon: -75.163431,\r\nzoom: 15\r\n```\r\n\r\nNow if you open the HTML file in a browser, you should see your map. You can see what mine looks like [here](parks_near_city_hall.html).\r\n\r\nCartoDB.js uses the Leaflet JavaScript library for displaying web maps. Next we're going to try out Leaflet directly.\r\n\r\n## Leaflet\r\n\r\nLeaflet has a tutorial on loading GeoJSON [over here](http://leafletjs.com/examples/geojson.html).\r\n\r\nLet's make a map of the Farmer's Markets in Philadelphia, using [the GeoJSON dataset from OpenDataPhilly](https://www.opendataphilly.org/dataset/farmers-markets-locations/resource/bbfd42c1-6a17-411b-9e04-8219551a53d4).\r\n\r\nHere's the [demo](http://flibbertigibbet.github.io/webmap-intro/farmers_markets.html) and the [source](https://github.com/flibbertigibbet/webmap-intro/blob/master/farmers_markets.html).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}